{"version":3,"file":"main.js","mappings":"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","sources":["./$_lazy_route_resources|lazy|groupOptions: {}|namespace object","./src/app/app-routing.module.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/header/header.component.ts","./src/app/header/header.component.html","./src/app/posts/post-create/post-create.component.ts","./src/app/posts/post-create/post-create.component.html","./src/app/posts/post-list/post-list.component.ts","./src/app/posts/post-list/post-list.component.html","./src/app/posts/posts.service.ts","./src/environments/environment.ts","./src/main.ts"],"sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(() => {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = () => ([]);\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = 8255;\nmodule.exports = webpackEmptyAsyncContext;","import { NgModule } from \"@angular/core\";\r\nimport { RouterModule, Routes } from \"@angular/router\";\r\nimport { PostCreateComponent } from \"./posts/post-create/post-create.component\";\r\nimport { PostListComponent } from \"./posts/post-list/post-list.component\";\r\n\r\nconst routes: Routes = [\r\n  { path: '', component: PostListComponent },\r\n  { path: 'create', component: PostCreateComponent },\r\n  // note use of dynamic URL below, ie URL parameters\r\n  { path: 'edit/:postId', component: PostCreateComponent },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class AppRoutingModule { }\r\n","import { Component } from '@angular/core';\nimport { Post } from './posts/post.model';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'project-mean';\n\n  storedPosts: Post[] = [];\n\n  onPostAdded(post: Post) {\n    this.storedPosts.push(post);\n  }\n}\n","<app-header></app-header>\n<main>\n  <router-outlet></router-outlet>\n</main>\n","import { NgModule } from '@angular/core';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatDividerModule } from '@angular/material/divider';\r\nimport { MatToolbarModule } from '@angular/material/toolbar';\r\nimport { MatExpansionModule } from '@angular/material/expansion';\r\n\r\nimport { HeaderComponent } from './header/header.component';\r\nimport { AppComponent } from './app.component';\r\nimport { PostCreateComponent } from './posts/post-create/post-create.component';\r\nimport { PostListComponent } from './posts/post-list/post-list.component';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { AppRoutingModule } from './app-routing.module';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    HeaderComponent,\r\n    AppComponent,\r\n    PostCreateComponent,\r\n    PostListComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    AppRoutingModule,\r\n    FormsModule,\r\n    BrowserAnimationsModule,\r\n    MatInputModule,\r\n    MatCardModule,\r\n    MatButtonModule,\r\n    MatDividerModule,\r\n    MatToolbarModule,\r\n    MatExpansionModule,\r\n    HttpClientModule\r\n  ],\r\n  providers: [],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","import { Component } from \"@angular/core\";\r\n\r\n@Component({\r\n  selector: 'app-header',\r\n  templateUrl: './header.component.html',\r\n  styleUrls: ['./header.component.css'],\r\n})\r\n\r\nexport class HeaderComponent {\r\n}\r\n\r\n","<mat-toolbar color=\"primary\">\r\n  <span>\r\n    <a routerLink=\"/\">MyMessages</a>\r\n  </span>\r\n  <span class=\"spacer\"></span>\r\n  <ul>\r\n    <li>\r\n      <a mat-button routerLink=\"/create\" routerLinkActive=\"mat-accent\">New Post</a>\r\n    </li>\r\n  </ul>\r\n</mat-toolbar>\r\n","import { Component, OnInit } from \"@angular/core\";\r\nimport { NgForm } from \"@angular/forms\";\r\nimport { ActivatedRoute, ParamMap } from \"@angular/router\";\r\n\r\nimport { PostsService } from \"../posts.service\";\r\nimport { Post } from \"../post.model\";\r\n@Component({\r\n  selector: 'app-post-create',\r\n  templateUrl: './post-create.component.html',\r\n  styleUrls: ['./post-create.component.css'],\r\n})\r\n\r\nexport class PostCreateComponent implements OnInit {\r\n  enteredTitle = '';\r\n  enteredContent = '';\r\n  private mode: string = 'create';\r\n  private postId: string;\r\n  post: Post;\r\n\r\n  constructor(public postsService: PostsService, public route: ActivatedRoute) {\r\n\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.route.paramMap.subscribe( (paramMap: ParamMap) => {\r\n      if (paramMap.has('postId')) {\r\n        this.mode = 'edit';\r\n        // we extratc the postId from the URL parameters\r\n        this.postId = paramMap.get('postId');\r\n        this.post = this.postsService.getPost(this.postId);\r\n      } else {\r\n        this.mode ='create';\r\n        this.postId = null;\r\n      }\r\n    });\r\n  }\r\n\r\n  onSavePost(form: NgForm) {\r\n    if (form.invalid) return;\r\n    if (this.mode === \"create\") {\r\n      console.log(`onSavePost: create new post`);\r\n      this.postsService.addPost(form.value.title, form.value.content);\r\n    } else {\r\n      console.log(`onSavePost: update post id=${this.postId}`);\r\n      this.postsService.updatePost(this.postId, form.value.title, form.value.content);\r\n    }\r\n    form.resetForm();\r\n  }\r\n}\r\n","<mat-card>\r\n  <form (submit)=\"onSavePost(postForm)\" #postForm=\"ngForm\">\r\n    <section>\r\n      <mat-form-field>\r\n        <input\r\n          matInput\r\n          type=\"text\"\r\n          name=\"title\"\r\n          [ngModel]=\"post.title\"\r\n          required\r\n          minlength=\"3\"\r\n          placeholder=\"Post Title\"\r\n          #title=\"ngModel\"\r\n        >\r\n        <mat-error *ngIf=\"title.invalid\">Please enter a title (of 3 characters or more) for your post.</mat-error>\r\n      </mat-form-field>\r\n      <mat-form-field>\r\n        <textarea\r\n          matInput\r\n          rows=\"6\"\r\n          name=\"content\"\r\n          [ngModel]=\"post.content\"\r\n          required\r\n          placeholder=\"Post Content\"\r\n        ></textarea>\r\n      </mat-form-field>\r\n    </section>\r\n    <mat-divider></mat-divider>\r\n    <section>\r\n      <button color='accent' mat-raised-button type=\"submit\">Save Post</button>\r\n    </section>\r\n  </form>\r\n</mat-card>\r\n","import { Component, OnInit } from \"@angular/core\";\r\nimport { Subscription } from 'rxjs';\r\nimport { Post } from '../post.model';\r\nimport { PostsService } from '../posts.service';\r\n\r\n@Component({\r\n  selector: 'app-post-list',\r\n  templateUrl: './post-list.component.html',\r\n  styleUrls: ['./post-list.component.css'],\r\n})\r\n\r\nexport class PostListComponent implements OnInit {\r\n  posts: Post[] = [];\r\n  private postsSub: Subscription;\r\n\r\n  constructor(public postsService: PostsService) { }\r\n\r\n  ngOnInit() {\r\n    // get the posts from the back-end\r\n    this.postsService.getPosts();\r\n\r\n    // subcribe to PostsService and on each update, we set our array from PostsService's copy\r\n    this.postsSub = this.postsService.getPostUpdatedListener()\r\n      .subscribe((posts: Post[]) => (this.posts = posts) );\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.postsSub.unsubscribe();\r\n  }\r\n\r\n  onDelete(id: string) {\r\n    this.postsService.deletePost(id);\r\n  }\r\n}\r\n\r\n","<mat-accordion multi=\"true\" *ngIf=\"posts.length > 0\">\r\n  <mat-expansion-panel *ngFor=\"let post of posts\">\r\n    <mat-expansion-panel-header>\r\n      <mat-panel-title>\r\n        {{ post.title }}\r\n      </mat-panel-title>\r\n    </mat-expansion-panel-header>\r\n    <p>{{ post.content }}</p>\r\n    <mat-action-row>\r\n      <button color='primary' mat-button [routerLink]=\"[ '/edit', post.id ]\">EDIT</button>\r\n      <button color='warn' mat-button (click)=\"onDelete(post.id)\">DELETE</button>\r\n    </mat-action-row>\r\n  </mat-expansion-panel>\r\n</mat-accordion>\r\n<p class=\"info-text mat-body-1\" *ngIf=\"posts.length <= 0\">No posts added yet!</p>\r\n","import { Injectable } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\nimport { Post } from './post.model';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { map } from 'rxjs/operators';\r\nimport { environment } from 'src/environments/environment';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class PostsService {\r\n  private posts: Post[] = [];\r\n  private postsObserved = new Subject<Post[]>();\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  getPosts() {\r\n    // get posts from back-end using http request!\r\n    return this.http.get<{ message: string, posts: any }>(environment.apiUrl+'/posts')\r\n      .pipe(\r\n        map(postData => {\r\n          return postData.posts.map(post => {\r\n            return {\r\n              title: post.title,\r\n              content: post.content,\r\n              id: post._id,\r\n            };\r\n          });\r\n        })\r\n      ).subscribe((postData) => {\r\n        this.posts = postData;\r\n        // update all the listeners\r\n        this.postsObserved.next([...this.posts]);\r\n      });\r\n  }\r\n  getPostUpdatedListener() {\r\n    return this.postsObserved.asObservable();\r\n  }\r\n\r\n  getPost(id: string) {\r\n    // return local copy of post\r\n    return {...this.posts.find(p => p.id === id)};\r\n  }\r\n\r\n  addPost(title: string, content: string) {\r\n    const post: Post = { id: null, title, content };\r\n    this.http.post<{ message: string, id: string }>(environment.apiUrl+'/posts', post)\r\n      .subscribe((response) => {\r\n        console.log(`add response received: `, response.message);\r\n        post.id = response.id;\r\n        this.posts.push(post);\r\n        // update all the listeners\r\n        this.postsObserved.next([...this.posts]);\r\n      });\r\n  }\r\n\r\n  updatePost(postId: string, title: string, content: string) {\r\n    const post: Post = { id: postId, title, content };\r\n    this.http.put(environment.apiUrl+'/'+postId, post)\r\n    .subscribe((response) => {\r\n      console.log(`put response received: `, response);\r\n    });\r\n  }\r\n\r\n  deletePost(postId: string) {\r\n    // delete from MongoDB\r\n    console.log(`delete button pressed id=${postId}`);\r\n    this.http.delete(environment.apiUrl+'/'+postId)\r\n      .subscribe(() => {\r\n        // delete from our local copy\r\n        this.posts = this.posts.filter(post => post.id !== postId);\r\n        // update all listeners\r\n        this.postsObserved.next([...this.posts]);\r\n      });\r\n  }\r\n\r\n}\r\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false,\n  apiUrl: \"http://localhost:3000/api\",\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\nimport 'zone.js/plugins/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"names":[],"sourceRoot":"webpack:///"}